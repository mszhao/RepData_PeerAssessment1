submit()
'I'%p%'love'%p%'R'
'I' %p% 'love' %p% 'R'
('I' %p% 'love') %p% 'R'
('I' %p% 'love') %p% 'R!'
'I'%p%'love'%p%'R!'
head(flag)
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_val
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
quit()
library(swirl)
ls()
rm(ls())
rm(list=ls())
rm(list<-ls())
rm(list=ls())
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob=c(0.3,0.7))
sample(c(0,1),100,prob=c(0.3,0.7),replace=TRUE)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
rpois(5,lambda=10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXLT(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
load("mtcars")
data(mtcars)
?boxplot
boxplot(mtcars$mpg~mtcars$cyl)
boxplot(formula=mpg ~ cyl,data=mtcars)
hist(mtcars$mpg)
r.version.string
R.version.string
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
select(cran,ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
help(group_by)
by_package<-group_by(cran,package)
by_package
summarize(by_package,aver_size=mean(size))
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_count<-select(pack_sum,count>679)
top_counts<-select(pack_sum,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
swirl()
R.version.string
swirl()
library(swirl)
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into=c("sex","class"))
submit()
students3
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
exit
ucscB<-dbConnect(MySql(),user="genome",host="genome-mysql.cse,ucsc.edu")
install.packages(“RMySQL”)
install.packages('RMySQL',type='source')
library(RMySql)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
library(RMySql)
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
library(RMySQL)
install.packages('RMySQL',type='source')
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
head(affyData)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R"); biocLite("rhdf5"); library(rhdf5)
q()
library(httr)
myapp<-oauth_app("github",key="9fee6b05b0da8b803808",secrete="89bb4a1b57949d7dd813f3e7e522e1c65e7fac74")
myapp<-oauth_app("github",key="9fee6b05b0da8b803808",secret="89bb4a1b57949d7dd813f3e7e522e1c65e7fac74")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken<-config(token=github_token)
req<-with_config(gtoken,GET("https://api.github.com/users/jtleek/repos"))
library(jsonlite)
json1<-fromJSON(toJSON(content(req)))
names(json1)
json1[json1$name=="datasharing",]$created_at
json1[json1$name=="message",]$created_at
json1[json1$name=="message"]$created_at
json1[json1$name=="datasharing"]$created_at
json1[json1$name=="documentation_url"]$created_at
json1[json1$name=="documentation_url",]$created_at
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github","9fee6b05b0da8b803808")
myapp <- oauth_app("github","9fee6b05b0da8b803808",secret="89bb4a1b57949d7dd813f3e7e522e1c65e7fac74")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github",key="9fee6b05b0da8b803808",secret="89bb4a1b57949d7dd813f3e7e522e1c65e7fac74")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos")
)
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github","9fee6b05b0da8b803808","89bb4a1b57949d7dd813f3e7e522e1c65e7fac74")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
myapp <- oauth_app("github","bfc390de8ef86a896814","fa857c3063f12ab3bdc9056957f5fcf492b94c93")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github","bfc390de8ef86a896814","fa857c3063f12ab3bdc9056957f5fcf492b94c93")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
q()
rm(list=ls())
library(RCurl)
library(XML)
theurl <- "https://class.coursera.org/statinference-014/lecture"
webpage <- getURL(theurl,ssl.verifypeer = FALSE))
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
writeLines(webpage, paste("web", ".html", sep=""))
theurl <- "https://class.coursera.org/statinference-014/lecture"
webpage <- getURL(theurl,ssl.verifypeer = FALSE)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
writeLines(webpage, paste("web", ".html", sep=""))
webpage <- getURL(theurl)
webpage <- getURL(theurl,ssl.verifypeer = FALSE)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
writeLines(webpage, paste("web", ".html", sep=""))
webpage
pagetree <- htmlTreeParse(theurl, error=function(...){}, useInternalNodes = TRUE)
vurl <- xpathSApply(pagetree, "//*/div[@class='course-lecture-item-resource']", xmlValue)
vurl <- xpathSApply(pagetree, "//*/div", xmlValue)
pagetree
t<-getURLContent(theurl)
t<-getURLContent(theurl,,ssl.verifypeer = FALSE)
t<-getURLContent(theurl,ssl.verifypeer = FALSE)
t
theurl <- "https://class.coursera.org/statinference-014/lecture/"
webpage <- getURL(theurl,ssl.verifypeer = FALSE)
webpage
theurl <- "https://class.coursera.org/statinference-014/lecture"
webpage <- getURL(theurl,ssl.verifypeer = FALSE)
url<-"https://www.coursera.org/login/?Email=mansuo@gmail.com&Passwd=haha600"
web<- getURL(url,ssl.verifypeer = FALSE)
web <- readLines(tc <- textConnection(web)); close(tc)
writeLines(web, paste("web", ".html", sep=""))
wd
getwd()
nosim <- 1000
n <- 40
lamda<-0.2
mu<-1/lamda
sd<-1/lamda
library(ggplot2)
#sample mean array
set.seed(10)
sml<-data.frame(mean=apply(matrix(rexp(nosim * n, lamda), nosim), 1, mean))
g <- ggplot(sml, aes(x = mean))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), color = "black")
g <- g + geom_density(size = 1)
g <- g + geom_vline(xintercept = mu, size = 1)
mse <- round(mean((sml$mean - mu)^2),3)
sampleMean<-round(mean(sml$mean),3)
g <- g + labs(title = paste('mu = ', mu, ' sample mean = ',sampleMean,"var=",round(sd^2/n,3)," sample var=",mse))
g
hx <- rnorm(nosim,mean=5,sd=sd)
group<-rep(c("Normal Distribution"),nosim)
df <- data.frame(id = seq_along(group), group,value=hx)
group2<-rep(c("Sample"),nosim)
df2 <- data.frame(id = seq_along(group2), group=group2,value=sml$mean)
dfm<-rbind(df,df2)
library(reshape2) # for melt
library(sm)
dfm <- melt(dfm, id.var = c("id", "group"))
sm.density.compare(dfm$value, group, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
sm.density.compare(dfm$value, group, xlab="Miles Per Gallon")
head(dfm)
ggplot(dfm, aes(x=value, fill=group)) + geom_density(alpha=.3)
ssd<-sd/sqrt(n)
ssd
ssd<-sd/sqrt(n)
hx <- rnorm(nosim,mean=5,sd=ssd)
group<-rep(c("Normal Distribution"),nosim)
df <- data.frame(id = seq_along(group), group,value=hx)
group2<-rep(c("Sample"),nosim)
df2 <- data.frame(id = seq_along(group2), group=group2,value=sml$mean)
dfm<-rbind(df,df2)
library(reshape2) # for melt
library(sm)
dfm <- melt(dfm, id.var = c("group"))
ggplot(dfm, aes(x=value, fill=group)) + geom_density(alpha=.3)
ssd<-sd/sqrt(nosim)
hx <- rnorm(nosim,mean=5,sd=ssd)
group<-rep(c("Normal Distribution"),nosim)
df <- data.frame(id = seq_along(group), group,value=hx)
group2<-rep(c("Sample"),nosim)
df2 <- data.frame(id = seq_along(group2), group=group2,value=sml$mean)
dfm<-rbind(df,df2)
library(reshape2) # for melt
library(sm)
dfm <- melt(dfm, id.var = c("group"))
ggplot(dfm, aes(x=value, fill=group)) + geom_density(alpha=.3)
set.seed(10)
sml<-data.frame(mean=apply(matrix(rexp(nosim * n, lamda), nosim), 1, mean))
g <- ggplot(sml, aes(x = mean))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), color = "black")
g <- g + geom_density(size = 1)
g <- g + geom_vline(xintercept = mu, size = 1)
mse <- round(mean((sml$mean - mu)^2),3)
sampleMean<-round(mean(sml$mean),3)
g <- g + labs(title = paste('mu = ', mu, ' sample mean = ',sampleMean,"var=",round(sd^2/n,3)," sample var=",mse))
g
ssd<-sd/sqrt(n)
hx <- rnorm(nosim,mean=5,sd=ssd)
group<-rep(c("Normal Distribution"),nosim)
df <- data.frame(id = seq_along(group), group,value=hx)
group2<-rep(c("Sample"),nosim)
df2 <- data.frame(id = seq_along(group2), group=group2,value=sml$mean)
dfm<-rbind(df,df2)
ggplot(dfm, aes(x=value, fill=group)) + geom_density(alpha=.3)
strptime(835,format="%H%M")
strptime("835",format="%H%M")
strptime("835",format="%HH%MM")
setwd("D:/work/GitHub/RepData_PeerAssessment1")
file<-"activity.csv"
raw<-read.csv(file)
raw$date<-as.Date(raw$date, format = "%Y-%m-%d")
head(raw)
str(raw)
t<-strptime(as.character(raw$interval),format="%HH%MM")
head(t)
library(lubridate)
hm(835)
hms(83500)
hms("83500")
hm("7 6")
hm(835)
hm("835")
hm("8 35")
hm("8.35")
hm("0.35")
t<hm(as.character(raw$interval/100.0))
p=5
p/100
hm(p)
hm(as.character(p))
as.character(p)
as.character(p/100)
hm(as.character(p/100))
t<-hm(as.character(raw$interval/100))
head(t)
hm("0")
hm("0.0")
raw$interval<-hm(as.character(raw$interval/100))
raw$interval[is.na(raw$interval)]<-hm("0.0")
head(raw)
library(dplyr)
raw_gd<-raw[complete.cases(raw),]
hm("00")
str_pad("0",width=4,side="left")
library(string)
install.packages("string")
library(string)
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
